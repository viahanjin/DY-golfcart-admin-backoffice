openapi: 3.0.3
info:
  title: 골프카트 관리 백오피스 API
  description: |
    DY 골프카트 관리 백오피스 시스템의 REST API 명세서입니다.
    
    ## 주요 기능
    - 사용자 인증 및 권한 관리
    - 골프장 정보 관리 (CRUD)
    - 골프카트 모니터링 및 관리
    - 맵 관리 및 파일 업로드
    - 실시간 카트 위치 추적
    
    ## 인증
    모든 API 요청은 JWT Bearer 토큰이 필요합니다.
    
    ## 실시간 데이터
    - 카트 위치 및 배터리 상태 실시간 모니터링
    - WebSocket 연결을 통한 실시간 알림
  version: 1.0.0
  contact:
    name: DY Golf Cart API Support
    email: api-support@dygolfcart.com
  license:
    name: Private
    
servers:
  - url: http://localhost:8080/api
    description: Development server
  - url: https://staging-api.dygolfcart.com/api
    description: Staging server
  - url: https://api.dygolfcart.com/api
    description: Production server

security:
  - bearerAuth: []

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: 사용자 로그인
      description: 이메일과 비밀번호로 사용자 인증 후 JWT 토큰을 발급합니다.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: "admin@example.com"
              password: "password123"
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LoginResponse'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - type: object
                    properties:
                      error:
                        type: object
                        properties:
                          code:
                            example: "AUTH_INVALID_CREDENTIALS"
                          message:
                            example: "이메일 또는 비밀번호가 올바르지 않습니다"

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: 토큰 갱신
      description: 리프레시 토큰을 사용하여 새로운 액세스 토큰을 발급받습니다.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  description: 리프레시 토큰
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: 토큰 갱신 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TokenResponse'
        '401':
          description: 유효하지 않은 리프레시 토큰
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: 로그아웃
      description: 현재 사용자 세션을 종료합니다.
      responses:
        '200':
          description: 로그아웃 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      message:
                        example: "로그아웃되었습니다."

  /golf-courses:
    get:
      tags:
        - Golf Courses
      summary: 골프장 목록 조회
      description: 등록된 골프장 목록을 페이지네이션과 함께 조회합니다.
      parameters:
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: 페이지당 항목 수
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: search
          in: query
          description: 검색어 (골프장명, 주소)
          schema:
            type: string
        - name: status
          in: query
          description: 상태 필터
          schema:
            type: string
            enum: [ACTIVE, INACTIVE]
        - name: sortBy
          in: query
          description: 정렬 기준
          schema:
            type: string
            enum: [name, createdAt, updatedAt]
            default: createdAt
        - name: sortOrder
          in: query
          description: 정렬 순서
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: 골프장 목록 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/GolfCourseListResponse'

    post:
      tags:
        - Golf Courses
      summary: 골프장 생성
      description: 새로운 골프장을 등록합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GolfCourseCreateRequest'
      responses:
        '201':
          description: 골프장 생성 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/GolfCourse'
        '409':
          description: 중복된 골프장명
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /golf-courses/{id}:
    get:
      tags:
        - Golf Courses
      summary: 골프장 상세 조회
      description: 특정 골프장의 상세 정보를 조회합니다.
      parameters:
        - name: id
          in: path
          required: true
          description: 골프장 ID
          schema:
            type: string
      responses:
        '200':
          description: 골프장 상세 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/GolfCourseDetail'
        '404':
          description: 골프장을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Golf Courses
      summary: 골프장 수정
      description: 기존 골프장 정보를 수정합니다.
      parameters:
        - name: id
          in: path
          required: true
          description: 골프장 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GolfCourseUpdateRequest'
      responses:
        '200':
          description: 골프장 수정 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/GolfCourse'
        '404':
          description: 골프장을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Golf Courses
      summary: 골프장 삭제
      description: 골프장을 삭제합니다.
      parameters:
        - name: id
          in: path
          required: true
          description: 골프장 ID
          schema:
            type: string
      responses:
        '200':
          description: 골프장 삭제 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      message:
                        example: "골프장이 삭제되었습니다."
        '404':
          description: 골프장을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /golf-courses/check-duplicate:
    get:
      tags:
        - Golf Courses
      summary: 골프장명 중복 확인
      description: 골프장명의 중복 여부를 확인합니다.
      parameters:
        - name: name
          in: query
          required: true
          description: 확인할 골프장명
          schema:
            type: string
        - name: excludeId
          in: query
          description: 제외할 골프장 ID (수정 시 사용)
          schema:
            type: string
      responses:
        '200':
          description: 중복 확인 완료
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          isDuplicate:
                            type: boolean
                            description: 중복 여부

  /carts:
    get:
      tags:
        - Carts
      summary: 카트 목록 조회
      description: 등록된 카트 목록을 조회합니다.
      parameters:
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: 페이지당 항목 수
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: golfCourseId
          in: query
          description: 골프장 ID 필터
          schema:
            type: string
        - name: status
          in: query
          description: 카트 상태 필터
          schema:
            type: string
            enum: [AVAILABLE, IN_USE, MAINTENANCE, CHARGING]
        - name: batteryLevel
          in: query
          description: 배터리 레벨 필터
          schema:
            type: string
            enum: [LOW, MEDIUM, HIGH]
        - name: search
          in: query
          description: 검색어 (카트 번호, 모델명)
          schema:
            type: string
      responses:
        '200':
          description: 카트 목록 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/CartListResponse'

    post:
      tags:
        - Carts
      summary: 카트 생성
      description: 새로운 카트를 등록합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartCreateRequest'
      responses:
        '201':
          description: 카트 생성 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Cart'

  /carts/{id}:
    get:
      tags:
        - Carts
      summary: 카트 상세 조회
      description: 특정 카트의 상세 정보를 조회합니다.
      parameters:
        - name: id
          in: path
          required: true
          description: 카트 ID
          schema:
            type: string
      responses:
        '200':
          description: 카트 상세 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/CartDetail'

    put:
      tags:
        - Carts
      summary: 카트 수정
      description: 기존 카트 정보를 수정합니다.
      parameters:
        - name: id
          in: path
          required: true
          description: 카트 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartUpdateRequest'
      responses:
        '200':
          description: 카트 수정 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Cart'

    delete:
      tags:
        - Carts
      summary: 카트 삭제
      description: 카트를 삭제합니다.
      parameters:
        - name: id
          in: path
          required: true
          description: 카트 ID
          schema:
            type: string
      responses:
        '200':
          description: 카트 삭제 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      message:
                        example: "카트가 삭제되었습니다."

  /carts/{id}/status:
    patch:
      tags:
        - Carts
      summary: 카트 상태 업데이트
      description: 카트의 상태를 업데이트합니다.
      parameters:
        - name: id
          in: path
          required: true
          description: 카트 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [AVAILABLE, IN_USE, MAINTENANCE, CHARGING]
                  description: 카트 상태
                note:
                  type: string
                  description: 상태 변경 메모
      responses:
        '200':
          description: 카트 상태 업데이트 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: string
                          status:
                            type: string
                          statusChangedAt:
                            type: string
                            format: date-time

  /carts/{id}/battery:
    get:
      tags:
        - Carts
      summary: 카트 배터리 상태 조회
      description: 특정 카트의 실시간 배터리 상태를 조회합니다.
      parameters:
        - name: id
          in: path
          required: true
          description: 카트 ID
          schema:
            type: string
      responses:
        '200':
          description: 배터리 상태 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/BatteryStatus'

  /carts/{id}/location:
    get:
      tags:
        - Carts
      summary: 카트 위치 조회
      description: 특정 카트의 실시간 위치 정보를 조회합니다.
      parameters:
        - name: id
          in: path
          required: true
          description: 카트 ID
          schema:
            type: string
      responses:
        '200':
          description: 위치 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LocationData'

  /maps:
    get:
      tags:
        - Maps
      summary: 맵 목록 조회
      description: 등록된 맵 목록을 조회합니다.
      parameters:
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: 페이지당 항목 수
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: golfCourseId
          in: query
          description: 골프장 ID 필터
          schema:
            type: string
        - name: type
          in: query
          description: 맵 타입 필터
          schema:
            type: string
            enum: [2D, 3D, SATELLITE]
        - name: search
          in: query
          description: 검색어 (맵 이름)
          schema:
            type: string
      responses:
        '200':
          description: 맵 목록 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MapListResponse'

    post:
      tags:
        - Maps
      summary: 맵 생성
      description: 새로운 맵을 등록합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MapCreateRequest'
      responses:
        '201':
          description: 맵 생성 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Map'

  /maps/{id}:
    get:
      tags:
        - Maps
      summary: 맵 상세 조회
      description: 특정 맵의 상세 정보를 조회합니다.
      parameters:
        - name: id
          in: path
          required: true
          description: 맵 ID
          schema:
            type: string
      responses:
        '200':
          description: 맵 상세 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MapDetail'

    put:
      tags:
        - Maps
      summary: 맵 수정
      description: 기존 맵 정보를 수정합니다.
      parameters:
        - name: id
          in: path
          required: true
          description: 맵 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MapUpdateRequest'
      responses:
        '200':
          description: 맵 수정 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Map'

    delete:
      tags:
        - Maps
      summary: 맵 삭제
      description: 맵을 삭제합니다.
      parameters:
        - name: id
          in: path
          required: true
          description: 맵 ID
          schema:
            type: string
      responses:
        '200':
          description: 맵 삭제 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      message:
                        example: "맵이 삭제되었습니다."

  /maps/upload-image:
    post:
      tags:
        - Maps
      summary: 맵 이미지 업로드
      description: 맵의 이미지 파일을 업로드합니다.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  type: string
                  format: binary
                  description: 업로드할 이미지 파일
                mapId:
                  type: string
                  description: 연결할 맵 ID (선택사항)
            encoding:
              image:
                contentType: image/jpeg, image/png, image/gif, image/webp
      responses:
        '200':
          description: 이미지 업로드 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/FileUploadResponse'
        '413':
          description: 파일 크기 초과
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '415':
          description: 지원하지 않는 파일 형식
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /maps/upload-metadata:
    post:
      tags:
        - Maps
      summary: 맵 메타데이터 폴더 업로드
      description: 맵의 메타데이터 폴더를 업로드합니다.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - metadata_files
              properties:
                metadata_files:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: 메타데이터 파일들
                mapId:
                  type: string
                  description: 연결할 맵 ID (선택사항)
      responses:
        '200':
          description: 메타데이터 업로드 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MetadataUploadResponse'

  /address/search:
    get:
      tags:
        - Address
      summary: 우편번호 검색
      description: 우편번호로 주소를 검색합니다.
      parameters:
        - name: postalCode
          in: query
          required: true
          description: 우편번호
          schema:
            type: string
            pattern: '^\d{5}$'
            example: '06234'
      responses:
        '200':
          description: 주소 검색 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AddressSearchResult'

  /address/reverse-geocode:
    get:
      tags:
        - Address
      summary: 역지오코딩
      description: 위도, 경도로 주소를 검색합니다.
      parameters:
        - name: lat
          in: query
          required: true
          description: 위도
          schema:
            type: number
            format: double
            minimum: -90
            maximum: 90
        - name: lng
          in: query
          required: true
          description: 경도
          schema:
            type: number
            format: double
            minimum: -180
            maximum: 180
      responses:
        '200':
          description: 역지오코딩 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ReverseGeocodeResult'

  /users:
    get:
      tags:
        - Users
      summary: 사용자 목록 조회
      description: 등록된 사용자 목록을 조회합니다.
      parameters:
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: 페이지당 항목 수
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: role
          in: query
          description: 역할 필터
          schema:
            type: string
            enum: [ADMIN, MANAGER, USER]
        - name: status
          in: query
          description: 상태 필터
          schema:
            type: string
            enum: [ACTIVE, INACTIVE, BLOCKED]
        - name: search
          in: query
          description: 검색어 (이름, 이메일)
          schema:
            type: string
      responses:
        '200':
          description: 사용자 목록 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserListResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT 액세스 토큰

  schemas:
    # 공통 응답 스키마
    SuccessResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          description: 성공 메시지

    ErrorResponse:
      type: object
      required:
        - success
        - error
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
              description: 에러 코드
            message:
              type: string
              description: 에러 메시지
            details:
              type: object
              description: 추가 에러 정보

    PaginationMeta:
      type: object
      required:
        - page
        - limit
        - total
        - totalPages
      properties:
        page:
          type: integer
          description: 현재 페이지
        limit:
          type: integer
          description: 페이지당 항목 수
        total:
          type: integer
          description: 전체 항목 수
        totalPages:
          type: integer
          description: 전체 페이지 수

    # 인증 관련 스키마
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: 사용자 이메일
          example: "admin@example.com"
        password:
          type: string
          minLength: 8
          description: 비밀번호
          example: "password123"

    LoginResponse:
      type: object
      required:
        - accessToken
        - refreshToken
        - user
      properties:
        accessToken:
          type: string
          description: 액세스 토큰
        refreshToken:
          type: string
          description: 리프레시 토큰
        user:
          $ref: '#/components/schemas/User'

    TokenResponse:
      type: object
      required:
        - accessToken
        - refreshToken
      properties:
        accessToken:
          type: string
          description: 새로운 액세스 토큰
        refreshToken:
          type: string
          description: 새로운 리프레시 토큰

    User:
      type: object
      required:
        - id
        - email
        - name
        - role
        - status
      properties:
        id:
          type: string
          description: 사용자 ID
        email:
          type: string
          format: email
          description: 이메일
        name:
          type: string
          description: 이름
        role:
          type: string
          enum: [ADMIN, MANAGER, USER]
          description: 역할
        status:
          type: string
          enum: [ACTIVE, INACTIVE, BLOCKED]
          description: 상태
        phone:
          type: string
          description: 전화번호
        department:
          type: string
          description: 부서
        golfCourseId:
          type: string
          nullable: true
          description: 소속 골프장 ID
        lastLoginAt:
          type: string
          format: date-time
          description: 마지막 로그인 시간
        createdAt:
          type: string
          format: date-time
          description: 생성 시간

    # 골프장 관련 스키마
    GolfCourse:
      type: object
      required:
        - id
        - name
        - address
        - status
        - location
      properties:
        id:
          type: string
          description: 골프장 ID
        name:
          type: string
          description: 골프장명
        address:
          type: string
          description: 주소
        postalCode:
          type: string
          description: 우편번호
        phone:
          type: string
          description: 전화번호
        email:
          type: string
          format: email
          description: 이메일
        status:
          type: string
          enum: [ACTIVE, INACTIVE]
          description: 상태
        coursesCount:
          type: integer
          description: 코스 수
        cartsCount:
          type: integer
          description: 카트 수
        location:
          $ref: '#/components/schemas/Location'
        operatingHours:
          $ref: '#/components/schemas/OperatingHours'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    GolfCourseDetail:
      allOf:
        - $ref: '#/components/schemas/GolfCourse'
        - type: object
          properties:
            description:
              type: string
              description: 골프장 설명
            detailAddress:
              type: string
              description: 상세 주소
            fax:
              type: string
              description: 팩스 번호
            website:
              type: string
              format: uri
              description: 웹사이트
            facilities:
              type: array
              items:
                type: string
              description: 시설 목록
            courses:
              type: array
              items:
                $ref: '#/components/schemas/Course'
            managers:
              type: array
              items:
                $ref: '#/components/schemas/Manager'

    GolfCourseCreateRequest:
      type: object
      required:
        - name
        - address
        - location
      properties:
        name:
          type: string
          description: 골프장명
        description:
          type: string
          description: 골프장 설명
        address:
          type: string
          description: 주소
        detailAddress:
          type: string
          description: 상세 주소
        postalCode:
          type: string
          description: 우편번호
        phone:
          type: string
          description: 전화번호
        fax:
          type: string
          description: 팩스 번호
        email:
          type: string
          format: email
          description: 이메일
        website:
          type: string
          format: uri
          description: 웹사이트
        location:
          $ref: '#/components/schemas/Location'
        operatingHours:
          $ref: '#/components/schemas/OperatingHours'
        facilities:
          type: array
          items:
            type: string
          description: 시설 목록

    GolfCourseUpdateRequest:
      $ref: '#/components/schemas/GolfCourseCreateRequest'

    GolfCourseListResponse:
      type: object
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/GolfCourse'
        pagination:
          $ref: '#/components/schemas/PaginationMeta'

    Location:
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          format: double
          minimum: -90
          maximum: 90
          description: 위도
        longitude:
          type: number
          format: double
          minimum: -180
          maximum: 180
          description: 경도

    OperatingHours:
      type: object
      properties:
        weekday:
          type: string
          pattern: '^\d{2}:\d{2}-\d{2}:\d{2}$'
          description: 평일 운영시간
          example: "06:00-18:00"
        weekend:
          type: string
          pattern: '^\d{2}:\d{2}-\d{2}:\d{2}$'
          description: 주말 운영시간
          example: "05:00-19:00"
        holiday:
          type: string
          pattern: '^\d{2}:\d{2}-\d{2}:\d{2}$'
          description: 공휴일 운영시간
          example: "05:00-19:00"

    Course:
      type: object
      required:
        - id
        - name
        - holes
        - par
      properties:
        id:
          type: string
          description: 코스 ID
        name:
          type: string
          description: 코스명
        holes:
          type: integer
          minimum: 1
          description: 홀 수
        par:
          type: integer
          minimum: 1
          description: 파
        length:
          type: number
          description: 코스 길이 (미터)

    Manager:
      type: object
      required:
        - id
        - name
        - role
      properties:
        id:
          type: string
          description: 매니저 ID
        name:
          type: string
          description: 매니저 이름
        role:
          type: string
          enum: [MANAGER, ASSISTANT_MANAGER]
          description: 역할
        phone:
          type: string
          description: 전화번호

    # 카트 관련 스키마
    Cart:
      type: object
      required:
        - id
        - cartNumber
        - modelName
        - golfCourseId
        - status
      properties:
        id:
          type: string
          description: 카트 ID
        cartNumber:
          type: string
          description: 카트 번호
        modelName:
          type: string
          description: 모델명
        manufacturer:
          type: string
          description: 제조사
        golfCourseId:
          type: string
          description: 골프장 ID
        golfCourseName:
          type: string
          description: 골프장명
        status:
          type: string
          enum: [AVAILABLE, IN_USE, MAINTENANCE, CHARGING]
          description: 카트 상태
        batteryLevel:
          type: integer
          minimum: 0
          maximum: 100
          description: 배터리 레벨 (%)
        batteryStatus:
          type: string
          enum: [NORMAL, LOW, CRITICAL]
          description: 배터리 상태
        isCharging:
          type: boolean
          description: 충전 중 여부
        lastMaintenance:
          type: string
          format: date
          description: 마지막 정비 날짜
        nextMaintenance:
          type: string
          format: date
          description: 다음 정비 예정일
        currentLocation:
          $ref: '#/components/schemas/CartLocation'
        usageStats:
          $ref: '#/components/schemas/UsageStats'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CartDetail:
      allOf:
        - $ref: '#/components/schemas/Cart'
        - type: object
          properties:
            manufacturingDate:
              type: string
              format: date
              description: 제조 날짜
            purchaseDate:
              type: string
              format: date
              description: 구매 날짜
            specifications:
              $ref: '#/components/schemas/CartSpecifications'
            battery:
              $ref: '#/components/schemas/BatteryDetail'
            maintenance:
              $ref: '#/components/schemas/MaintenanceInfo'

    CartCreateRequest:
      type: object
      required:
        - cartNumber
        - modelName
        - golfCourseId
      properties:
        cartNumber:
          type: string
          description: 카트 번호
        modelName:
          type: string
          description: 모델명
        manufacturer:
          type: string
          description: 제조사
        manufacturingDate:
          type: string
          format: date
          description: 제조 날짜
        purchaseDate:
          type: string
          format: date
          description: 구매 날짜
        golfCourseId:
          type: string
          description: 골프장 ID
        specifications:
          $ref: '#/components/schemas/CartSpecifications'
        battery:
          type: object
          properties:
            voltage:
              type: number
              description: 배터리 전압
            capacity:
              type: number
              description: 배터리 용량

    CartUpdateRequest:
      $ref: '#/components/schemas/CartCreateRequest'

    CartListResponse:
      type: object
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Cart'
        pagination:
          $ref: '#/components/schemas/PaginationMeta'

    CartLocation:
      type: object
      properties:
        latitude:
          type: number
          format: double
          description: 위도
        longitude:
          type: number
          format: double
          description: 경도
        course:
          type: string
          description: 코스명
        hole:
          type: integer
          description: 홀 번호

    CartSpecifications:
      type: object
      properties:
        seatingCapacity:
          type: integer
          description: 승차 정원
        maxSpeed:
          type: number
          description: 최대 속도 (km/h)
        weight:
          type: number
          description: 무게 (kg)
        dimensions:
          type: object
          properties:
            length:
              type: number
              description: 길이 (mm)
            width:
              type: number
              description: 너비 (mm)
            height:
              type: number
              description: 높이 (mm)

    BatteryStatus:
      type: object
      required:
        - cartId
        - level
        - status
      properties:
        cartId:
          type: string
          description: 카트 ID
        level:
          type: integer
          minimum: 0
          maximum: 100
          description: 배터리 레벨 (%)
        voltage:
          type: number
          description: 전압 (V)
        current:
          type: number
          description: 전류 (A)
        temperature:
          type: number
          description: 온도 (°C)
        status:
          type: string
          enum: [NORMAL, LOW, CRITICAL]
          description: 배터리 상태
        isCharging:
          type: boolean
          description: 충전 중 여부
        estimatedRange:
          type: number
          description: 예상 주행 거리 (km)
        estimatedTime:
          type: number
          description: 예상 주행 시간 (시간)
        cycles:
          type: integer
          description: 충전 사이클 수
        health:
          type: integer
          minimum: 0
          maximum: 100
          description: 배터리 건강도 (%)
        lastUpdate:
          type: string
          format: date-time
          description: 마지막 업데이트 시간

    BatteryDetail:
      allOf:
        - $ref: '#/components/schemas/BatteryStatus'
        - type: object
          properties:
            lastChargeTime:
              type: string
              format: date-time
              description: 마지막 충전 시간

    LocationData:
      type: object
      required:
        - cartId
        - latitude
        - longitude
      properties:
        cartId:
          type: string
          description: 카트 ID
        latitude:
          type: number
          format: double
          description: 위도
        longitude:
          type: number
          format: double
          description: 경도
        altitude:
          type: number
          description: 고도 (m)
        speed:
          type: number
          description: 속도 (km/h)
        heading:
          type: number
          minimum: 0
          maximum: 360
          description: 방향 (도)
        course:
          type: string
          description: 코스명
        hole:
          type: integer
          description: 홀 번호
        accuracy:
          type: number
          description: 정확도 (m)
        lastUpdate:
          type: string
          format: date-time
          description: 마지막 업데이트 시간

    UsageStats:
      type: object
      properties:
        totalDistance:
          type: number
          description: 총 주행 거리 (km)
        totalHours:
          type: number
          description: 총 주행 시간 (시간)
        todayDistance:
          type: number
          description: 오늘 주행 거리 (km)
        todayHours:
          type: number
          description: 오늘 주행 시간 (시간)

    MaintenanceInfo:
      type: object
      properties:
        lastDate:
          type: string
          format: date
          description: 마지막 정비 날짜
        nextDate:
          type: string
          format: date
          description: 다음 정비 예정일
        history:
          type: array
          items:
            $ref: '#/components/schemas/MaintenanceRecord'

    MaintenanceRecord:
      type: object
      properties:
        date:
          type: string
          format: date
          description: 정비 날짜
        type:
          type: string
          enum: [REGULAR, REPAIR, EMERGENCY]
          description: 정비 유형
        description:
          type: string
          description: 정비 내용
        technician:
          type: string
          description: 정비 기사
        cost:
          type: number
          description: 정비 비용

    # 맵 관련 스키마
    Map:
      type: object
      required:
        - id
        - name
        - golfCourseId
        - type
      properties:
        id:
          type: string
          description: 맵 ID
        name:
          type: string
          description: 맵 이름
        description:
          type: string
          description: 맵 설명
        golfCourseId:
          type: string
          description: 골프장 ID
        golfCourseName:
          type: string
          description: 골프장명
        type:
          type: string
          enum: [2D, 3D, SATELLITE]
          description: 맵 타입
        version:
          type: string
          description: 맵 버전
        imageUrl:
          type: string
          format: uri
          description: 이미지 URL
        thumbnailUrl:
          type: string
          format: uri
          description: 썸네일 URL
        metadataUrl:
          type: string
          format: uri
          description: 메타데이터 URL
        bounds:
          $ref: '#/components/schemas/MapBounds'
        layers:
          type: array
          items:
            $ref: '#/components/schemas/MapLayer'
        fileSize:
          type: integer
          description: 파일 크기 (bytes)
        resolution:
          type: string
          description: 해상도
          example: "4096x4096"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    MapDetail:
      allOf:
        - $ref: '#/components/schemas/Map'
        - type: object
          properties:
            metadata:
              $ref: '#/components/schemas/MapMetadata'
            waypoints:
              type: array
              items:
                $ref: '#/components/schemas/Waypoint'
            statistics:
              $ref: '#/components/schemas/MapStatistics'
            files:
              $ref: '#/components/schemas/MapFiles'
            createdBy:
              $ref: '#/components/schemas/UserInfo'
            updatedBy:
              $ref: '#/components/schemas/UserInfo'

    MapCreateRequest:
      type: object
      required:
        - name
        - golfCourseId
        - type
        - bounds
      properties:
        name:
          type: string
          description: 맵 이름
        description:
          type: string
          description: 맵 설명
        golfCourseId:
          type: string
          description: 골프장 ID
        type:
          type: string
          enum: [2D, 3D, SATELLITE]
          description: 맵 타입
        bounds:
          $ref: '#/components/schemas/MapBounds'

    MapUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: 맵 이름
        description:
          type: string
          description: 맵 설명
        version:
          type: string
          description: 맵 버전

    MapListResponse:
      type: object
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Map'
        pagination:
          $ref: '#/components/schemas/PaginationMeta'

    MapBounds:
      type: object
      required:
        - north
        - south
        - east
        - west
      properties:
        north:
          type: number
          format: double
          description: 북쪽 경계 위도
        south:
          type: number
          format: double
          description: 남쪽 경계 위도
        east:
          type: number
          format: double
          description: 동쪽 경계 경도
        west:
          type: number
          format: double
          description: 서쪽 경계 경도
        center:
          $ref: '#/components/schemas/Location'

    MapLayer:
      type: object
      required:
        - name
        - type
        - visible
      properties:
        id:
          type: string
          description: 레이어 ID
        name:
          type: string
          description: 레이어 이름
        type:
          type: string
          enum: [polygon, line, point, raster]
          description: 레이어 타입
        visible:
          type: boolean
          description: 표시 여부
        style:
          type: object
          description: 레이어 스타일
        features:
          type: integer
          description: 피처 수

    MapMetadata:
      type: object
      properties:
        format:
          type: string
          description: 메타데이터 형식
        projection:
          type: string
          description: 좌표계
        accuracy:
          type: number
          description: 정확도 (m)
        captureDate:
          type: string
          format: date
          description: 촬영 날짜
        source:
          type: string
          description: 데이터 소스

    Waypoint:
      type: object
      required:
        - id
        - name
        - type
        - coordinates
      properties:
        id:
          type: string
          description: 웨이포인트 ID
        name:
          type: string
          description: 웨이포인트 이름
        type:
          type: string
          enum: [tee, green, fairway, hazard, bunker]
          description: 웨이포인트 타입
        coordinates:
          $ref: '#/components/schemas/Location'

    MapStatistics:
      type: object
      properties:
        totalArea:
          type: number
          description: 총 면적 (㎡)
        totalDistance:
          type: number
          description: 총 거리 (m)
        holes:
          type: integer
          description: 홀 수
        par:
          type: integer
          description: 파

    MapFiles:
      type: object
      properties:
        image:
          $ref: '#/components/schemas/FileInfo'
        metadata:
          $ref: '#/components/schemas/FileInfo'

    FileInfo:
      type: object
      properties:
        url:
          type: string
          format: uri
          description: 파일 URL
        size:
          type: integer
          description: 파일 크기 (bytes)
        mimeType:
          type: string
          description: MIME 타입
        resolution:
          type: string
          description: 해상도 (이미지인 경우)
        fileCount:
          type: integer
          description: 파일 수 (폴더인 경우)
        format:
          type: string
          description: 형식 (메타데이터인 경우)

    UserInfo:
      type: object
      properties:
        id:
          type: string
          description: 사용자 ID
        name:
          type: string
          description: 사용자 이름

    # 파일 업로드 관련 스키마
    FileUploadResponse:
      type: object
      required:
        - url
        - filename
        - size
      properties:
        url:
          type: string
          format: uri
          description: 업로드된 파일 URL
        thumbnailUrl:
          type: string
          format: uri
          description: 썸네일 URL
        filename:
          type: string
          description: 파일명
        size:
          type: integer
          description: 파일 크기 (bytes)
        mimeType:
          type: string
          description: MIME 타입
        resolution:
          type: string
          description: 해상도 (이미지인 경우)

    MetadataUploadResponse:
      type: object
      required:
        - folderPath
        - fileCount
      properties:
        folderPath:
          type: string
          description: 업로드된 폴더 경로
        fileCount:
          type: integer
          description: 업로드된 파일 수
        jsonFileCount:
          type: integer
          description: JSON 파일 수
        totalSize:
          type: integer
          description: 총 파일 크기 (bytes)
        files:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: 파일명
              path:
                type: string
                description: 상대 경로
              size:
                type: integer
                description: 파일 크기 (bytes)

    # 주소 관련 스키마
    AddressSearchResult:
      type: object
      required:
        - postalCode
        - address
      properties:
        postalCode:
          type: string
          description: 우편번호
        address:
          type: string
          description: 주소
        englishAddress:
          type: string
          description: 영문 주소
        addressType:
          type: string
          enum: [ROAD, JIBUN]
          description: 주소 타입
        latitude:
          type: number
          format: double
          description: 위도
        longitude:
          type: number
          format: double
          description: 경도

    ReverseGeocodeResult:
      type: object
      required:
        - address
        - coordinates
      properties:
        address:
          type: string
          description: 주소
        postalCode:
          type: string
          description: 우편번호
        addressType:
          type: string
          enum: [ROAD, JIBUN]
          description: 주소 타입
        building:
          type: string
          description: 건물명
        coordinates:
          $ref: '#/components/schemas/Location'

    # 사용자 목록 응답
    UserListResponse:
      type: object
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pagination:
          $ref: '#/components/schemas/PaginationMeta'

  # 응답 예시
  examples:
    LoginSuccess:
      summary: 로그인 성공 예시
      value:
        success: true
        data:
          accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          user:
            id: "user_123"
            email: "admin@example.com"
            name: "관리자"
            role: "ADMIN"

    ValidationError:
      summary: 유효성 검사 실패 예시
      value:
        success: false
        error:
          code: "VALIDATION_ERROR"
          message: "입력한 데이터가 올바르지 않습니다"
          details:
            email: ["이메일 형식이 올바르지 않습니다"]
            password: ["비밀번호는 8자 이상이어야 합니다"]

    NotFound:
      summary: 리소스를 찾을 수 없음
      value:
        success: false
        error:
          code: "RESOURCE_NOT_FOUND"
          message: "요청한 리소스를 찾을 수 없습니다"

tags:
  - name: Authentication
    description: 사용자 인증 관련 API
  - name: Golf Courses
    description: 골프장 관리 API
  - name: Carts
    description: 골프카트 관리 API
  - name: Maps
    description: 맵 관리 API
  - name: Address
    description: 주소 검색 API
  - name: Users
    description: 사용자 관리 API